// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addUserToSubscription = `-- name: AddUserToSubscription :exec
INSERT INTO subscribed_users(id, user_name, telegram_id, telegram_charge_id, provider_charge_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
`

type AddUserToSubscriptionParams struct {
	ID               uuid.UUID
	UserName         string
	TelegramID       int32
	TelegramChargeID string
	ProviderChargeID string
}

func (q *Queries) AddUserToSubscription(ctx context.Context, arg AddUserToSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, addUserToSubscription,
		arg.ID,
		arg.UserName,
		arg.TelegramID,
		arg.TelegramChargeID,
		arg.ProviderChargeID,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, user_name, telegram_id)
VALUES (
  $1,
  $2,
  $3
)
RETURNING id, created_at, user_name, telegram_id, points, is_subscribed
`

type CreateUserParams struct {
	ID         uuid.UUID
	UserName   string
	TelegramID int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.UserName, arg.TelegramID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserName,
		&i.TelegramID,
		&i.Points,
		&i.IsSubscribed,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one

SELECT id, created_at, user_name, telegram_id, points, is_subscribed FROM users 
WHERE user_name = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserName,
		&i.TelegramID,
		&i.Points,
		&i.IsSubscribed,
	)
	return i, err
}

const updateUserPoints = `-- name: UpdateUserPoints :one
UPDATE users SET points = $1
WHERE telegram_id = $1
RETURNING id, created_at, user_name, telegram_id, points, is_subscribed
`

func (q *Queries) UpdateUserPoints(ctx context.Context, points sql.NullInt32) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPoints, points)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserName,
		&i.TelegramID,
		&i.Points,
		&i.IsSubscribed,
	)
	return i, err
}

const updateUserSubscriptionStatus = `-- name: UpdateUserSubscriptionStatus :exec

UPDATE users SET is_subscribed = TRUE, points = $1 
WHERE  telegram_id = $2
`

type UpdateUserSubscriptionStatusParams struct {
	Points     sql.NullInt32
	TelegramID int32
}

func (q *Queries) UpdateUserSubscriptionStatus(ctx context.Context, arg UpdateUserSubscriptionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSubscriptionStatus, arg.Points, arg.TelegramID)
	return err
}
